@using Opc.Ua.Cloud.Publisher.Models

@model string[]

@{
    ViewData["Title"] = "Published OPC UA Nodes Management";
}

<h1>@ViewData["Title"]</h1>


<div class="container-fluid browser_connect_container">
    <p>
        <div class="progress-bar active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" id="publishingStatus">
        </div>
    </p>
    <form method="post" enctype="multipart/form-data" asp-controller="Published" asp-action="LoadPersisted">
        <br/>
        <p>
            <h3>Load previously published nodes</h3>
        </p>
        UA Cloud Publisher stores its settings and the configuration of all publishes nodes.<br />
        <br />
        <p>
            <input class="btn btn-primary" type="submit" value="Load">
        </p>
    </form>
    <form method="post" enctype="multipart/form-data" asp-controller="Published" asp-action="Load">
        <br />
        <hr style="border-top: 1px solid blue" />
        <br />
        <p>
            <h3>Open a local publishednodes.json file</h3>
        </p>
        <p>
            <input class="btn btn-primary" type="file" name="file">
        </p>
        <p>
            <input class="btn btn-primary" type="submit" value="Open">
        </p>
    </form>
        <br />
        <hr style="border-top: 1px solid blue" />
        <br />
        <p>
            <h3>List of Currently Published OPC UA Nodes</h3>
        </p>
        <form method="post" enctype="multipart/form-data" asp-controller="Published" asp-action="DownloadFile">
            <p>
                <input class="btn btn-primary" type="submit" value="Generate publishednodes.json file for currently published nodes">
            </p>
        </form>
        <ul>
            @foreach (var node in Model)
            {
                @if (node.StartsWith("Error"))
                {
                    @node
                }
                else
                {
                    <li>
                        @node
                        <form method="post" enctype="multipart/form-data" asp-controller="Published" asp-action="DeleteNode">
                            <input name="@node" class="btn btn-primary" type="submit" value="Delete">
                        </form>
                        <br />
                    </li>
                }
            }
        </ul>
</div>

@section scripts {
      <script>

            $(async function ()
            {
                // connection to SignalR hub
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/statusHub")
                    .configureLogging(signalR.LogLevel.Information)
                    .build();

                // update progress function
                connection.on("updateProgress", function(percentage)
                {
                    var status = document.getElementById("publishingStatus");
                    status.style.width = percentage + "%";
                    $("#publishingStatus").text('Publishing: ' + percentage + '% complete!');
                });

                // start/continue the connection
                async function establishSignalRConnection()
                {
                    try
                    {
                        await connection.start();
                        console.log("Connection to SignalR Status Hub successfull established.");
                    } catch (err) {
                        console.warn("Error creating SignalR connection, retry in 5 seconds %o", err);
                        setTimeout(async () => { await establishSignalRConnection(); }, 5000);
                    }
                };

                connection.onclose(async () => { await establishSignalRConnection(); });

                // start the connection
                await establishSignalRConnection();
            });

        </script>
}
