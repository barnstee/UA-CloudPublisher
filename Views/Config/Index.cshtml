@using Opc.Ua.Cloud.Publisher.Models

@model Settings

@{
    ViewData["Title"] = "Configuration";
}

<h1>@ViewData["Title"]</h1>

<p>
    Click <a href="https://microsoft.com/devicelogin" target="_blank">here</a> to use the code below for <b>Microsoft OneLake</b> authentication:<br />
    @Html.TextBox("AuthCode", @Model.AuthenticationCode, new { style = "width:100%;background-color:grey;color:white;", @readonly = "true" })<br />
    <br />
    Note: UA Cloud Publisher will show up as Microsoft Azure Cross-platform Command Line Interface. When prompted "Are you trying to sign in to Microsoft Azure CLI?", select continue.<br />
</p>
<br />
<hr style="border-top: 1px solid blue" />
<br />
<form method="post" enctype="multipart/form-data" asp-controller="Config" asp-action="LocalCertOpen">
    <br />
    By default, the OPC UA client cert is also used as the MQTT client cert, but a custom MQTT cert can also be provided here:
    <br />
    <p>
        <input class="btn btn-primary" type="file" name="file" accept=".pfx,.der">
        <input class="btn btn-primary" type="submit" value="Open">
    </p>
</form>
<br />
<hr style="border-top: 1px solid blue" />
<br />
<form action="/Config/Apply" method="post">
    <p>
        OPC UA (by default) & MQTT Client Certificate Thumbprint<br />
        @Html.Label("UACertThumbprint", @Model.UACertThumbprint, null)<br />
    </p>
    <p>
        OPC UA (by default) & MQTT Client Certificate Expiry<br />
        @Html.Label("UACertExpiry", @Model.UACertExpiry.ToString(), null)<br />
    </p>
    <br />
    <hr style="border-top: 1px solid blue" />
    <br />
    <p>
        <input class="btn btn-primary" type="submit" name="Apply" value="Apply Changes" />
    </p>
    <p>
        Publisher Name (<b>required</b>)<br />
        @Html.TextBox("PublisherName", @Model.PublisherName, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker URL (<b>required</b>)<br />
        @Html.TextBox("BrokerUrl", @Model.BrokerUrl, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Port (<b>required</b>)<br />
        @Html.TextBox("BrokerPort", @Model.BrokerPort, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Username (<b>required</b>)<br />
        @Html.TextBox("BrokerUsername", @Model.BrokerUsername, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Password (<b>required</b>)<br />
        @Html.Password("BrokerPassword", @Model.BrokerPassword, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Message Topic (<b>required</b>)<br />
        @Html.TextBox("BrokerMessageTopic", @Model.BrokerMessageTopic, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Send OPC UA Metadata Messages<br />
        @Html.CheckBox("SendUAMetadata", @Model.SendUAMetadata)<br />
    </p>
    <p>
        Broker Metadata Topic<br />
        @Html.TextBox("BrokerMetadataTopic", @Model.BrokerMetadataTopic, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Use Alternative Broker For OPC UA Metadata Messages (must not be enabled in conjunction with Use Alt Broker For Receiving UA Over MQTT)<br />
        @Html.CheckBox("UseAltBrokerForMetadata", @Model.UseAltBrokerForMetadata)<br />
    </p>
    <p>
        Use Alternative Broker For Receiving OPC UA PubSub Over MQTT Messages (must not be enabled in conjunction with Use Alt Broker For Metadata)<br />
        @Html.CheckBox("UseAltBrokerForReceivingUAOverMQTT", @Model.UseAltBrokerForReceivingUAOverMQTT)<br />
    </p>
    <p>
        Alternative Broker URL<br />
        @Html.TextBox("AltBrokerUrl", @Model.AltBrokerUrl, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Alternative Broker Port<br />
        @Html.TextBox("AltBrokerPort", @Model.AltBrokerPort, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Alternative Broker Username<br />
        @Html.TextBox("AltBrokerUsername", @Model.AltBrokerUsername, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Alternative Broker Password<br />
        @Html.Password("AltBrokerPassword", @Model.AltBrokerPassword, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Send OPC UA Status Messages<br />
        @Html.CheckBox("SendUAStatus", @Model.SendUAStatus)<br />
    </p>
    <p>
        Metadata Send Interval in Seconds<br />
        @Html.TextBox("MetadataSendInterval", @Model.MetadataSendInterval, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Command Topic<br />
        @Html.TextBox("BrokerCommandTopic", @Model.BrokerCommandTopic, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Data Received Topic<br />
        @Html.TextBox("BrokerDataReceivedTopic", @Model.BrokerDataReceivedTopic, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Command Response Topic<br />
        @Html.TextBox("BrokerResponseTopic", @Model.BrokerResponseTopic, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Broker Message Size<br />
        @Html.TextBox("BrokerMessageSize", @Model.BrokerMessageSize, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Use Kafka<br />
        @Html.CheckBox("UseKafka", @Model.UseKafka)<br />
    </p>
    <p>
        Create Broker SAS Token<br />
        @Html.CheckBox("CreateBrokerSASToken", @Model.CreateBrokerSASToken)<br />
    </p>
     <p>
        Use TLS with Broker (when switching off TLS, you will most likely also need to update the Broker Port)<br />
        @Html.CheckBox("UseTLS", @Model.UseTLS)<br />
    </p>
    <p>
        Use OPC UA certificate for authentication with Broker<br />
        @Html.CheckBox("UseUACertAuth", @Model.UseUACertAuth)<br />
    </p>
    <p>
        Use custom certificate for authentication with Broker (loaded above)<br />
        @Html.CheckBox("UseCustomCertAuth", @Model.UseCustomCertAuth)<br />
    </p>
    <p>
        Use reverse connect to connect to OPC UA servers. UA Cloud Publisher will listen on port 50000.<br />
        @Html.CheckBox("UseReverseConnect", @Model.UseReverseConnect)<br />
    </p>
    <p>
        Push new OPC UA certificates to server before publishing data from it (GDS Server Push feature)<br />
        @Html.CheckBox("PushCertsBeforePublishing", @Model.PushCertsBeforePublishing)<br />
    </p>
    <p>
        Internal Queue Capacity<br />
        @Html.TextBox("InternalQueueCapacity", @Model.InternalQueueCapacity, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Default Send Interval in Seconds<br />
        @Html.TextBox("DefaultSendIntervalSeconds", @Model.DefaultSendIntervalSeconds, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Diagnostics Logging Interval in Seconds<br />
        @Html.TextBox("DiagnosticsLoggingInterval", @Model.DiagnosticsLoggingInterval, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Default OPC UA Sampling Interval in Milliseconds<br />
        @Html.TextBox("DefaultOpcSamplingInterval", @Model.DefaultOpcSamplingInterval, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Default OPC UA Publishing Interval in Milliseconds<br />
        @Html.TextBox("DefaultOpcPublishingInterval", @Model.DefaultOpcPublishingInterval, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        OPC UA Stack Trace Mask<br />
        @Html.TextBox("UAStackTraceMask", @Model.UAStackTraceMask, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Use Reversible PubSub Encoding<br />
        @Html.CheckBox("ReversiblePubSubEncoding", @Model.ReversiblePubSubEncoding)<br />
    </p>
    <p>
        Auto-Load Previously Published Nodes on Startup<br />
        @Html.CheckBox("AutoLoadPersistedNodes", @Model.AutoLoadPersistedNodes)<br />
    </p>
    <p>
        Azure OpenAI API Endpoint, e.g. https://wotgpt4.openai.azure.com/<br />
        @Html.TextBox("AzureOpenAIAPIEndpoint", @Model.AzureOpenAIAPIEndpoint, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Azure OpenAI API Key<br />
        @Html.TextBox("AzureOpenAIAPIKey", @Model.AzureOpenAIAPIKey, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
    <p>
        Azure OpenAI Deployment or Model Name<br />
        @Html.TextBox("AzureOpenAIDeploymentName", @Model.AzureOpenAIDeploymentName, new { style = "width:100%;background-color:grey;color:white;" })<br />
    </p>
</form>
