
@using Opc.Ua.Cloud.Publisher.Interfaces
@using Opc.Ua.Cloud.Publisher.Models
@using Opc.Ua
@using Opc.Ua.Client;

@inject OpcSessionHelper _helper
@inject IUAClient _client

<div class="text-light">
    <p>
        <b>@StatusMessage</b>
    </p>
</div>
<div class="col-12 row">
    <div class="col-6">
        <Tree Nodes="UANodes" TNode="UANode" ChildSelector="node => node.Children" SelectedNodeChanged="SelectedNodeChanged" OnNodeExpand="OnNodeExpand" HasChildNodes="HasChildNodes">
            <TitleTemplate>
                @{
                    if (context.NodeId.StartsWith("ns="))
                    {
                        <span class="text-light"><b>@context.Text</b></span>
                    }
                    else
                    {
                        <span class="text-light">@context.Text</span>
                    }
                }
            </TitleTemplate>
        </Tree>
    </div>
    <div class="col-6">
        NodeId: <b>@NodeId</b><br />
        NodeDisplayName: <b>@NodeDisplayName</b><br />
        NodeValue: <b>@NodeValue</b><br />
        <button class="btn btn-primary" hidden="@NodeNotPublishable" @onclick="VariablePublishAsync">Publish</button>
    </div>
</div>

@code {

        [Parameter]
        public string EndpointUrl { get; set; } = string.Empty;

        [Parameter]
        public string Username { get; set; } = string.Empty;

        [Parameter]
        public string Password { get; set; } = string.Empty;

        [Parameter]
        public string StatusMessage { get; set; } = string.Empty;

        [Parameter]
        public string SessionId { get; set; } = string.Empty;

    private class UANode
    {
        public string Text { get; set; } = string.Empty;

        public string NodeId { get; set; } = string.Empty;

        public IEnumerable<UANode> Children { get; set; } = null;
    }

    private List<UANode> UANodes = new();

    private string NodeId { get; set; } = string.Empty;
    private string NodeDisplayName { get; set; } = string.Empty;
    private string NodeValue { get; set; } = string.Empty;
    private bool NodeNotPublishable { get; set; } = true;

    protected override void OnInitialized()
    {
        UANodes.Add(new UANode() {
            Text = "Root",
            NodeId = ObjectIds.ObjectsFolder.ToString()
        });
    }

    private async Task OnNodeExpand(UANode expendedNode)
    {
        if (expendedNode.Children == null)
        {
            expendedNode.Children = await GetChildrenAsync(expendedNode).ConfigureAwait(false);
        }
    }

    private async void SelectedNodeChanged(UANode node)
    {
        await VariableReadAsync(node).ConfigureAwait(false);
    }

    private bool HasChildNodes(UANode node)
    {
        if (node.Children == null)
        {
            return true;
        }

        if (node.Children.Count() == 0)
        {
            return false;
        }

        return true;
    }

    private async Task<List<UANode>> GetChildrenAsync(UANode node)
    {
        BrowseDescription nodeToBrowse = new()
        {
            NodeId = string.IsNullOrEmpty(node.NodeId)? ObjectIds.ObjectsFolder : node.NodeId,
            BrowseDirection = BrowseDirection.Forward,
            ReferenceTypeId = ReferenceTypeIds.HierarchicalReferences,
            IncludeSubtypes = true,
            NodeClassMask = (uint)(NodeClass.Object | NodeClass.Variable),
            ResultMask = (uint)BrowseResultMask.All
        };

        try
        {
            Session session = await _helper.GetSessionAsync(SessionId, EndpointUrl, Username, Password).ConfigureAwait(false);

            ReferenceDescriptionCollection references = UAClient.Browse(session, nodeToBrowse, true);

            Dictionary<string, UANode> processedReferences = new();
            foreach (ReferenceDescription nodeReference in references)
            {
                UANode newNode = new() {
                    NodeId = nodeReference.NodeId.ToString(),
                    Text = nodeReference.DisplayName.ToString()
                };

                if (!processedReferences.ContainsKey(newNode.NodeId))
                {
                    processedReferences.Add(newNode.NodeId, newNode);
                }
            }

            List<UANode> nodes = processedReferences.Values.ToList();
            nodes.Sort((x, y) => x.Text.CompareTo(y.Text));
            return nodes;
        }
        catch (Exception ex)
        {
            StatusMessage = ex.Message;

            _helper.Disconnect(SessionId);

            return new List<UANode>();
        }
    }

    private async Task VariableReadAsync(UANode node)
    {
        try
        {
            // set default values
            NodeId = node.NodeId;
            NodeDisplayName = node.Text;
            NodeValue = string.Empty;
            NodeNotPublishable = true;

            DataValueCollection values = null;
            DiagnosticInfoCollection diagnosticInfos = null;
            ReadValueIdCollection nodesToRead = new ReadValueIdCollection();

            ReadValueId valueId = new() {
                NodeId = new NodeId(node.NodeId),
                AttributeId = Attributes.Value,
                IndexRange = null,
                DataEncoding = null
            };
            nodesToRead.Add(valueId);

            Session session = await _helper.GetSessionAsync(SessionId, EndpointUrl, Username, Password).ConfigureAwait(false);
            ResponseHeader responseHeader = session.Read(null, 0, TimestampsToReturn.Both, nodesToRead, out values, out diagnosticInfos);
            if (values.Count > 0 && values[0].Value != null)
            {
                NodeId = new ExpandedNodeId(valueId.NodeId, session.NamespaceUris.ToArray()[valueId.NodeId.NamespaceIndex]).ToString();
                NodeDisplayName = node.Text;
                NodeValue = values[0].WrappedValue.ToString(); ;
                NodeNotPublishable = false;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = ex.Message;

            _helper.Disconnect(SessionId);
        }
    }

    public async Task VariablePublishAsync()
    {
        try
        {
            Session session = await _helper.GetSessionAsync(SessionId, EndpointUrl, Username, Password).ConfigureAwait(false);

            NodePublishingModel node = new NodePublishingModel
                {
                    ExpandedNodeId = new ExpandedNodeId(NodeId),
                    EndpointUrl = EndpointUrl,
                    SkipFirst = false,
                    Username = null,
                    Password = null,
                    OpcAuthenticationMode = UserAuthModeEnum.Anonymous
                };

            if (!string.IsNullOrEmpty(Username) && (Password != null))
            {
                node.Username = Username;
                node.Password = Password;
                node.OpcAuthenticationMode = UserAuthModeEnum.UsernamePassword;
            }

            StatusMessage = await _client.PublishNodeAsync(node).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            StatusMessage = ex.Message;

            _helper.Disconnect(SessionId);
        }
    }
}
